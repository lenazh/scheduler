# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

shared_examples 'a JSON controller for a resource,' do

  # singular downcase string of the class name
  let(:model_string) { model_class.to_s.underscore }

  # singular downcase symbol of the class name
  let(:model_symbol) { model_string.to_sym }

  # minimal set of attributes required to create a valid model
  let(:valid_attributes) { attributes_for model_symbol }

  # minimal set of attributes required to create an invalid model
  let(:invalid_attributes) { attributes_for "invalid_#{model_string}".to_sym }

  # set of valid attributes required to update model
  let(:updated_valid_attributes) { attributes_for "updated_valid_#{model_string}".to_sym }

  # set of invalid attributes required to update model
  let(:updated_invalid_attributes) { attributes_for "invalid_#{model_string}".to_sym }

  # symbol of the variable being assigned by the
  # controller in all the other methods
  let(:assigned_variable) { model_symbol }

  # symbol of the variable being assigned by the RESTful 
  # controller in the index method
  let(:mass_assigned_variable) { model_string.pluralize.to_sym }

  describe "GET index" do
    it "assigns all models as @models" do
      model = model_class.create! valid_attributes
      get :index, {:format => :json}, valid_session
      assigns(mass_assigned_variable).should eq([model])
    end
  end

  describe "GET show" do
    it "assigns the requested model as @model" do
      model = model_class.create! valid_attributes
      get :show, {:id => model.to_param, :format => :json}, valid_session
      assigns(assigned_variable).should eq(model)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new model_class" do
        expect {
          post :create, {assigned_variable => valid_attributes, :format => :json}, valid_session
        }.to change(model_class, :count).by(1)
      end

      it "assigns a newly created course as @course" do
        post :create, {assigned_variable => valid_attributes, :format => :json}, valid_session
        assigns(assigned_variable).should be_a(model_class)
        assigns(assigned_variable).should be_persisted
      end

      it "returns :created code" do
        post :create, {assigned_variable => valid_attributes, :format => :json}, valid_session
        expect(response.response_code).to eq(code(:created))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved course as @course" do
        # Trigger the behavior that occurs when invalid params are submitted
        model_class.any_instance.stub(:save).and_return(false)
        post :create, {assigned_variable => invalid_attributes, :format => :json}, valid_session
        assigns(assigned_variable).should be_a_new(model_class)
      end

      it "returns :unprocessable_entity code" do
        # Trigger the behavior that occurs when invalid params are submitted
        model_class.any_instance.stub(:save).and_return(false)
        post :create, {assigned_variable => invalid_attributes, :format => :json}, valid_session
        expect(response.response_code).to eq(code(:unprocessable_entity))
      end
    end
  end

describe "PUT update" do
  describe "with valid params" do
    it "updates the requested model" do
      model = model_class.create! valid_attributes
      # Assuming there are no other models in the database, this
      # specifies that the model_class created on the previous line
      # receives the :update_attributes message with whatever params are
      # submitted in the request.
      model_class.any_instance.should_receive(:update).with(updated_valid_attributes.stringify_keys)
      put :update, {:id => model.to_param, assigned_variable => updated_valid_attributes, :format => :json}, valid_session
    end

    it "assigns the requested model as @model" do
      model = model_class.create! valid_attributes
      put :update, {:id => model.to_param, assigned_variable => valid_attributes, :format => :json}, valid_session
      assigns(assigned_variable).should eq(model)
    end

    it "returns success code" do
      model = model_class.create! valid_attributes
      put :update, {:id => model.to_param, assigned_variable => valid_attributes, :format => :json}, valid_session
      response.should be_success
    end
  end

  describe "with invalid params" do
    it "assigns the model as @model" do
      model = model_class.create! valid_attributes
      # Trigger the behavior that occurs when invalid params are submitted
      model_class.any_instance.stub(:save).and_return(false)
      put :update, {:id => model.to_param, assigned_variable => updated_invalid_attributes, :format => :json}, valid_session
      assigns(assigned_variable).should eq(model)
    end

    it "returns :unprocessable_entity code" do
      model = model_class.create! valid_attributes
      # Trigger the behavior that occurs when invalid params are submitted
      model_class.any_instance.stub(:save).and_return(false)
      put :update, {:id => model.to_param, assigned_variable => updated_invalid_attributes, :format => :json}, valid_session
      expect(response.response_code).to eq(code(:unprocessable_entity))
    end
  end
end

describe "DELETE destroy" do
  it "destroys the requested model" do
    model = model_class.create! valid_attributes
    expect {
      delete :destroy, {:id => model.to_param}, valid_session
    }.to change(model_class, :count).by(-1)
  end

  it "returns :no_content code" do
    model = model_class.create! valid_attributes
    delete :destroy, {:id => model.to_param}, valid_session
    expect(response.response_code).to eq(code(:no_content))
  end
end

private

  def code(code)
    Rack::Utils::SYMBOL_TO_STATUS_CODE[code]
  end

end
